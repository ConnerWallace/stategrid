@{
    var showClass = IsVisible ? "d-block" : "d-none";
}

<div class="toast-container p-3 @showClass" data-bs-autohide="true" data-bs-delay="5000">
    <div class="toast show" role="alert" aria-live="assertive" aria-atomic="true">
        <div class="toast-header">
            <strong class="me-auto">@HeaderText</strong>
            <button type="button" class="btn-close" aria-label="Close" @onclick="Close"></button>
        </div>

        <div class="toast-body">
            <input type="search" name="name" value="@input" @oninput="@(a => {input = (string) a.Value;})" />
            <input type="submit" name="submit" onclick="@Submit" />
        </div>
    </div>
</div>

@code {
    [Parameter]
    public bool IsVisible { get; set; }

    [Parameter]
    public EventCallback<(int, string)> IsVisibleChanged { get; set; }

    [Parameter]
    public string? HeaderText { get; set; }

    public string input { get; set; } = "";
    public int index { get; set; } = 0;


    public void Show(int index, string headerText)
    {
        this.index = index;
        HeaderText = headerText;
        IsVisible = true;
        StateHasChanged();
    }

    private void Close()
    {
        HeaderText = string.Empty;
        IsVisible = false;
        StateHasChanged();
    }

    private void Submit()
    {
        IsVisibleChanged.InvokeAsync((index, input));
        IsVisible = false;
        StateHasChanged();
    }
}